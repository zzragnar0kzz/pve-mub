#!/bin/bash

hdr_script="[${0##*/}]"
[[ -z "$1" ]] && { echo "$hdr_script [!] no VMID supplied; aborting" >&2; exit 1; }
[[ -z "$2" ]] && { echo "$hdr_script [!] no VM lifecycle phase supplied; aborting" >&2; exit 1; }

regex_vmid='^[0-9]+$'
[[ $1 =~ $regex_vmid ]] || { echo "$hdr_script [!] VMID  $1  is invalid; aborting" >&2; exit 2; }

vmid="$1"
hdr_vmid="$hdr_script [VM $vmid]"

hookconf="/etc/pve/qemu-server/$vmid.hookconf"
[[ -s "$hookconf" ]] || { echo "$hdr_vmid [!] configuration file  $hookconf  is empty or invalid; aborting" >&2; exit 3; }

phase="$2"

pause=20

get_vm_pid() {
  local hdr_local="$hdr_vmid [${FUNCNAME[0]}]"
  local_errors=0
  echo "$hdr_local retrieving PID for this VM"
  local pidfile="/run/qemu-server/$vmid.pid"
  [[ -s "$pidfile" ]] || { echo "$hdr_local [!] there does not appear to be a PID associated with this VM; aborting" >&2; exit 4; }
  vmpid="$(< $pidfile)"
  echo "$hdr_local finished with  $local_errors  errors"
}

hook_pin_interrupts() {
  local hdr_local="$hdr_vmid [${FUNCNAME[0]}]"
  local_errors=0
  echo "$hdr_local pinning thread(s) from attached device interrupt(s) to host core(s)  $cpuset"

  # the PCI device IDs of any device(s) passed through to this virtual machine, from any hostpciX lines in its conf file
  pci_devs="$(grep hostpci /etc/pve/qemu-server/$vmid.conf | cut -d ":" -f 2- | cut -d "," -f 1 | while read -r c; do echo "$c "; done;)"
  for device in $pci_devs; do
    echo "$hdr_local pinning interrupt(s) for PCI(e) device  $device  to host core(s)  $cpuset"
    grep $device /proc/interrupts | cut -d ":" -f 1 | while read -r i; do
      echo "$hdr_local [PCI(e) $device] : pinning interrupt  $i  to host core(s)  $cpuset"
      echo $cpuset > /proc/irq/$i/smp_affinity_list
    done;
  done;
  echo "$hdr_local finished with  $local_errors  errors"
}

hook_pin_processors() {
  local hdr_local="$hdr_vmid [${FUNCNAME[0]}]"
  local_errors=0
  echo "$hdr_local pinning thread(s) for guest vCPUs to host core(s)  $cpuset"
  taskset --cpu-list --all-tasks --pid "$cpuset" "$vmpid"
  echo "$hdr_local finished with  $local_errors  errors"
}

hook_set_haltpollns() {
  local hdr_local="$hdr_vmid [${FUNCNAME[0]}]"
  local_errors=0
  echo "$hdr_local setting host halt_poll_ns value to  $haltpollns"
  echo $haltpollns > /sys/module/kvm/parameters/halt_poll_ns
  echo "$hdr_local finished with  $local_errors  errors"
}

hook_set_scheduler() {
  local hdr_local="$hdr_vmid [${FUNCNAME[0]}]"
  local_errors=0
  echo "$hdr_local adjusting scheduler : setting policy to  $schedulerpolicy;  setting priority to  $schedulerpriority"
  chrt -v "--$schedulerpolicy" -a -p "$schedulerpriority" "$vmpid"
  echo "$hdr_local finished with  $local_errors  errors"
}

post_start_hooks() {
  local hdr_local="$hdr_vmid [${FUNCNAME[0]}]"
  echo "$hdr_local preparing validated hook(s) for this lifecycle phase"
  get_vm_pid
  local executed_hooks=0
  echo "$hdr_local waiting  $pause  second(s) to accommodate any passed through device(s) . . ."
  sleep ${pause}s
  [[ $execute_hook_pin_processors -eq 1 ]] && { ((++executed_hooks)); echo "$hdr_local executing  $executed_hooks  of  $valid_hooks  validated hook(s)"; hook_pin_processors; }
  [[ $execute_hook_pin_interrupts -eq 1 ]] && { ((++executed_hooks)); echo "$hdr_local executing  $executed_hooks  of  $valid_hooks  validated hook(s)"; hook_pin_interrupts; }
  [[ $execute_hook_set_scheduler -eq 1 ]] && { ((++executed_hooks)); echo "$hdr_local executing  $executed_hooks  of  $valid_hooks  validated hook(s)"; hook_set_scheduler; }
  [[ $execute_hook_set_haltpollns -eq 1 ]] && { ((++executed_hooks)); echo "$hdr_local executing  $executed_hooks  of  $valid_hooks  validated hook(s)"; hook_set_haltpollns; }
  [[ $executed_hooks -ne $valid_hooks ]] && { echo "$hdr_local [!] the number of executed hook(s)  $executed_hooks   does not equal the number of validated hook(s)  $valid_hooks; aborting" >&2; exit 5; }
  echo "$hdr_local finished executing  $executed_hooks  hook(s) for this lifecycle phase; exiting"
}

pre_start_hooks() {
  local hdr_local="$hdr_vmid [${FUNCNAME[0]}]"
  local executed_hooks=0
  echo "$hdr_local executing validated hook(s) for this lifecycle phase"
  echo "$hdr_local finished executing  $executed_hooks  hook(s) for this lifecycle phase; exiting"
}

validate_hookconf() {
  local hdr_local="$hdr_vmid [${FUNCNAME[0]}]"
  echo "$hdr_local validating  $valid_options  parsed option(s)"
  valid_hooks=0

  if [[ -n "$cpuset" ]]; then 
    echo "$hdr_local option  cpuset  defined as  $cpuset;  validating associated option(s)"
    if [[ -n "$pinprocessors" ]] && [[ $pinprocessors -eq 1 ]]; then
      echo "$hdr_local option  pinprocessors  enabled; marking  hook_pin_processors()  for execution"
      execute_hook_pin_processors=1
      ((++valid_hooks))
    else
      echo "$hdr_local option  pinprocessors  disabled or not defined; skipping execution of  hook_pin_processors()"
    fi
    if [[ -n "$pininterrupts" ]] && [[ $pininterrupts -eq 1 ]]; then
      echo "$hdr_local option  pininterrupts  enabled; marking  hook_pin_interrupts()  for execution"
      execute_hook_pin_interrupts=1
      ((++valid_hooks))
    else
      echo "$hdr_local option  pininterrupts  disabled or not defined; skipping execution of  hook_pin_interrupts()"
    fi
  else
    echo "$hdr_local option  cpuset  not defined; skipping execution of  hook_pin_processors()"
    echo "$hdr_local option  cpuset  not defined; skipping execution of  hook_pin_interrupts()"
  fi

  if [[ -n "$adjustscheduler" ]] && [[ $adjustscheduler -eq 1 ]]; then
    echo "$hdr_local option  adjustscheduler  enabled; validating associated option(s)"
    if [[ -n "$schedulerpolicy" ]]; then
      case $schedulerpolicy in
        fifo)
          echo "$hdr_local option  schedulerpolicy  defined as  $schedulerpolicy;  validating associated option(s)"
          if [[ -n "$schedulerpriority" ]] && [[ $schedulerpriority -ge 1 ]] && [[ $schedulerpriority -le 99 ]]; then
            echo "$hdr_local option  schedulerpriority  set to  $schedulerpriority;  marking  hook_set_scheduler()  for execution"
          else
            schedulerpriority=20
            echo "$hdr_local option  schedulerpriority  is outside the valid range of  1-99;  resetting to  $schedulerpriority;  marking  hook_set_scheduler()  for execution"
          fi
          execute_hook_set_scheduler=1
          ((++valid_hooks))
          ;;
        *)
          echo "$hdr_local option  schedulerpolicy  is invalid; skipping  hook_set_scheduler()"
          ;;
      esac
    else
      echo "$hdr_local option  schedulerpolicy  is not defined; skipping  hook_set_scheduler()"
    fi
  else
    echo "$hdr_local option  adjustscheduler  disabled or not defined; skipping  hook_set_scheduler()"
  fi

  if [[ -n "$haltpollns" ]] && [[ $haltpollns -ge 0 ]]; then
    echo "$hdr_local option  haltpollns  set to  $haltpollns;  marking  hook_set_haltpollns()  for execution"
    execute_hook_set_haltpollns=1
    ((++valid_hooks))
  else
    echo "$hdr_local option  haltpollns  is outside the valid range of  >=0  or is undefined; skipping  hook_set_haltpollns()"
  fi

  echo "$hdr_local finished validating parsed option(s): preparing to execute  $valid_hooks  validated hook(s) for lifecycle phase  $phase"
}

parse_hookconf() {
  local hdr_local="$hdr_vmid [${FUNCNAME[0]}]"
  echo "$hdr_local parsing configuration file  $hookconf  for valid defined options"
  local invalid_options=0
  valid_options=0
  while IFS=' :' read -r option value; do
    [[ $option = \#* ]] && continue
    case $option in
      adjustscheduler|cpuset|haltpollns|pininterrupts|pinprocessors|schedulerpolicy|schedulerpriority)
        IFS= read -r "$option" <<< "$value"
        ((++valid_options))
        ;;
      *) ((++invalid_options)) ;;
    esac
  done < "$hookconf"
  echo "$hdr_local finished parsing  $hookconf: identified  $valid_options  valid item(s); ignoring  $invalid_options  invalid item(s)"
}

echo "$hdr_vmid initialization complete; identifying and validating hook(s) for lifecycle phase  $phase"
parse_hookconf
validate_hookconf

case "$phase" in
  "post-start") post_start_hooks ;;
  "pre-start") pre_start_hooks ;;
  *) echo "$hdr_vmid invalid phase fallback stub" ;;
esac

echo "$hdr_vmid finished executing  $phase  hook(s); exiting"
exit 0
